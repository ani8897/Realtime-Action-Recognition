"""
Contains CNN feature extraction class using Intel's NCS 
"""

import cv2
import numpy as np

from openvino.inference_engine import IEPlugin
from openvino.inference_engine import IENetwork

class FeatureExtractor():
	
	def __init__(self, binary_path, xml_path):
		plugin = IEPlugin(device="MYRIAD")

		# read the IR generated by the Model Optimizer (.xml and .bin files)
		print("[INFO] loading models...")
		net = IENetwork(model=xml_path, weights=binary_path)

		# prepare inputs
		print("[INFO] preparing inputs...")
		self.inputBlob = next(iter(net.inputs))

		# set the default batch size as 1 and get the number of input blobs,
		# number of channels, the height, and width of the input blob
		net.batch_size = 1
		print(net.inputs[self.inputBlob].shape)

		print("[INFO] loading model to the plugin...")
		self.execNet = plugin.load(network=net, num_requests=1)
		print("[INFO] Model loaded successfully!")

		self.mean = np.array([0.485, 0.456, 0.406])
		self.std = np.array([0.229, 0.224, 0.225]) ## Effectively dividing by 255

	def extract(self, frame):
		"""
		Return extracted features
		"""
		return self.execNet.infer({self.inputBlob: frame})

	def preprocess_frame(self, frame):
		frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) ## Convert frame from BGR to RGB
		frame = frame / 255.0
		frame = cv2.resize(frame, (224, 224))
		for i in range(3):
			frame[:, :, i] = (frame[:, :, i] - self.mean[i])/self.std[i]
		frame = np.transpose(frame, (2,0,1))
		frame = frame.astype('float32')
		return frame
